import { type Lead, type InsertLead, type User, type InsertUser, type UserPreferences, type InsertUserPreferences, type NotificationSettings, type InsertNotificationSettings, type SecuritySettings, type InsertSecuritySettings, type NotificationLog, type InsertNotificationLog, type UserSession, type InsertUserSession, type PasswordReset, type InsertPasswordReset } from "./shared/schema";
export interface IStorage {
    getLeads(userId?: string): Promise<Lead[]>;
    getLead(id: string, userId?: string): Promise<Lead | undefined>;
    createLead(lead: InsertLead, userId?: string): Promise<Lead>;
    batchCreateLeads(leads: InsertLead[], userId?: string): Promise<Lead[]>;
    updateLead(id: string, lead: Partial<InsertLead>, userId?: string): Promise<Lead | undefined>;
    deleteLead(id: string, userId?: string): Promise<boolean>;
    searchLeads(query: string, userId?: string): Promise<Lead[]>;
    filterLeads(filters: {
        status?: string | string[];
        category?: string;
        city?: string;
    }, userId?: string): Promise<Lead[]>;
    getUsers(): Promise<User[]>;
    getUser(id: string): Promise<User | undefined>;
    getUserByEmail(email: string): Promise<User | undefined>;
    createUser(user: InsertUser): Promise<User>;
    updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;
    deleteUser(id: string): Promise<boolean>;
    getUserPreferences(userId: string): Promise<UserPreferences | undefined>;
    createUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences>;
    updateUserPreferences(userId: string, preferences: Partial<InsertUserPreferences>): Promise<UserPreferences | undefined>;
    getNotificationSettings(userId: string): Promise<NotificationSettings | undefined>;
    createNotificationSettings(settings: InsertNotificationSettings): Promise<NotificationSettings>;
    updateNotificationSettings(userId: string, settings: Partial<InsertNotificationSettings>): Promise<NotificationSettings | undefined>;
    getSecuritySettings(userId: string): Promise<SecuritySettings | undefined>;
    createSecuritySettings(settings: InsertSecuritySettings): Promise<SecuritySettings>;
    updateSecuritySettings(userId: string, settings: Partial<InsertSecuritySettings>): Promise<SecuritySettings | undefined>;
    generateApiKey(): string;
    getNotificationLogs(userId: string, limit?: number): Promise<NotificationLog[]>;
    createNotificationLog(log: InsertNotificationLog): Promise<NotificationLog>;
    markNotificationAsRead(logId: string): Promise<boolean>;
    deleteOldNotificationLogs(userId: string, daysOld: number): Promise<number>;
    createUserSession(session: InsertUserSession): Promise<UserSession>;
    getUserSession(sessionToken: string): Promise<UserSession | undefined>;
    deleteUserSession(sessionToken: string): Promise<boolean>;
    deleteExpiredSessions(): Promise<number>;
    createPasswordReset(reset: InsertPasswordReset): Promise<PasswordReset>;
    getPasswordResetByEmail(email: string): Promise<PasswordReset | undefined>;
    getPasswordResetByOtp(email: string, otp: string): Promise<PasswordReset | undefined>;
    markPasswordResetAsUsed(id: string): Promise<boolean>;
    deleteExpiredPasswordResets(): Promise<number>;
    validateUserPassword(email: string, password: string): Promise<User | null>;
    hashPassword(password: string): Promise<string>;
}
export declare class SqlStorage implements IStorage {
    private db;
    private pool;
    constructor();
    getLeads(userId?: string): Promise<Lead[]>;
    getLead(id: string, userId?: string): Promise<Lead | undefined>;
    createLead(insertLead: InsertLead, userId?: string): Promise<Lead>;
    batchCreateLeads(insertLeads: InsertLead[], userId?: string): Promise<Lead[]>;
    updateLead(id: string, updateData: Partial<InsertLead>, userId?: string): Promise<Lead | undefined>;
    deleteLead(id: string, userId?: string): Promise<boolean>;
    searchLeads(query: string, userId?: string): Promise<Lead[]>;
    filterLeads(filters: {
        status?: string | string[];
        category?: string;
        city?: string;
    }, userId?: string): Promise<Lead[]>;
    getUsers(): Promise<User[]>;
    getUser(id: string): Promise<User | undefined>;
    getUserByEmail(email: string): Promise<User | undefined>;
    createUser(user: InsertUser): Promise<User>;
    updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;
    deleteUser(id: string): Promise<boolean>;
    getUserPreferences(userId: string): Promise<UserPreferences | undefined>;
    createUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences>;
    updateUserPreferences(userId: string, preferences: Partial<InsertUserPreferences>): Promise<UserPreferences | undefined>;
    getNotificationSettings(userId: string): Promise<NotificationSettings | undefined>;
    createNotificationSettings(settings: InsertNotificationSettings): Promise<NotificationSettings>;
    updateNotificationSettings(userId: string, settings: Partial<InsertNotificationSettings>): Promise<NotificationSettings | undefined>;
    getSecuritySettings(userId: string): Promise<SecuritySettings | undefined>;
    createSecuritySettings(settings: InsertSecuritySettings): Promise<SecuritySettings>;
    updateSecuritySettings(userId: string, settings: Partial<InsertSecuritySettings>): Promise<SecuritySettings | undefined>;
    generateApiKey(): string;
    getNotificationLogs(userId: string, limit?: number): Promise<NotificationLog[]>;
    createNotificationLog(log: InsertNotificationLog): Promise<NotificationLog>;
    markNotificationAsRead(logId: string): Promise<boolean>;
    deleteOldNotificationLogs(userId: string, daysOld: number): Promise<number>;
    createUserSession(session: InsertUserSession): Promise<UserSession>;
    getUserSession(sessionToken: string): Promise<UserSession | undefined>;
    deleteUserSession(sessionToken: string): Promise<boolean>;
    deleteExpiredSessions(): Promise<number>;
    createPasswordReset(reset: InsertPasswordReset): Promise<PasswordReset>;
    getPasswordResetByEmail(email: string): Promise<PasswordReset | undefined>;
    getPasswordResetByOtp(email: string, otp: string): Promise<PasswordReset | undefined>;
    markPasswordResetAsUsed(id: string): Promise<boolean>;
    deleteExpiredPasswordResets(): Promise<number>;
    validateUserPassword(email: string, password: string): Promise<User | null>;
    hashPassword(password: string): Promise<string>;
}
export declare const storage: SqlStorage;
